import abc
import threading

class AbstractSingletonMeta(abc.ABCMeta):
    """
    Это потокобезопасная реализация абстрактного класса Singleton.
    """
    __instances = {}
    __lock = threading.Lock()
    """
    У нас теперь есть объект-блокировка для синхронизации потоков
    во время первого доступа к Одиночке.
    """

    def __call__(cls, *args, **kwargs):
        """
        Данная реализация не учитывает возможное изменение
        передаваемых аргументов в '__init__'.
        """
        # Теперь представьте, что программа была только что запущена.
        # Объекта-одиночки еще никто не создавал, поэтому несколько потоков
        # вполне могли одновременно пройти через предыдущее условие и достигнуть
        # блокировки. Самый быстрый поток поставит блокировку и двинется внутрь
        # секции, пока другие будут здесь его ожидать.
        with cls.__lock:
            # Первый поток достигает этого условия и проходит внутрь, создавая
            # объект-одиночку. Как только этот поток покинет секцию и освободит
            # блокировку, следующий поток может снова установить блокировку и
            # зайти внутрь. Однако теперь экземпляр одиночки уже будет создан и
            # поток не сможет пройти через это условие, а значит новый объект
            # не будет создан.
            if cls not in cls.__instances:
                instance = super().__call__(*args, **kwargs)
                cls.__instances[cls] = instance
        return cls.__instances[cls]